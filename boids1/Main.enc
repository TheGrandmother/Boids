import Random
-- import Util -- commented to avoid duplicate inclusion
import Vectors
import Boid

class Main {
  width: int
  height: int

  def main(args: [String]): void {
    setSeed(1);

    this.width = 500;
    this.height = 500;
    let nBoids = 100;
    let nSteps = 100;

    let flock = new Flock(nSteps);
    repeat i <- nBoids {
      flock.createBoid(new Vector2D(this.width/2, this.height/2))
    };
    flock!step()
  }
}

class Flock
  boids : [Boid] -- Use static array as a size
  bdata : [BoidData]
  cap   : int    -- Capacity
  len   : int    -- Actual length
  moved : int
  steps : int

  def init(steps: int) : void {
    this.cap = 1000;
    this.len = 0;
    this.moved = 0;
    this.steps = steps;
    this.boids = new [Boid](this.cap);
    this.bdata = new [BoidData](this.cap)
  }

  def createBoid(loc: Vector2D): void {
    if (this.len >= this.cap) then
      let
        newBoids = new [Boid](this.cap + 10)
        newData  = new [BoidData](this.cap + 10)
      in {
        repeat i <- this.len {
          newBoids[i] = this.boids[i];
          newData[i] = this.bdata[i];
        };
        this.boids = newBoids;
        this.bdata = newData;
        this.cap = this.cap + 10
        -- this.len unchanged
      };
    let bd = new BoidData(loc);
    let b = new Boid(this.len, bd);
    this.boids[this.len] = b;
    this.bdata[this.len] = bd;
    this.len = this.len + 1
  }

  def size(): int {
    this.len
  }

  def step(): void {
    if this.steps == 0 then {
      for b in this.boids {
        b!move(this.bdata)
      };
    }
  }

  def ack(bd: BoidData, i: int): void {
    this.bdata[i] = bd;
    this.moved = this.moved + 1;
    if this.moved == this.size() then {
      this.moved = 0;
      this!step()
    }
  }

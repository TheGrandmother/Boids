import Random
-- import Util -- commented to avoid duplicate inclusion
import Vectors
import Boid

class Main {
  width: int
  height: int

  def main(args: [String]): void {
    setSeed(5);

    this.width = 500;
    this.height = 500;
    let nBoids = 2;
    let nSteps = 1000;

    let flock = new Flock(nSteps, this.width, this.height, nBoids);
    repeat i <- nBoids {
      flock.createBoid(new Vector2D(this.width/2, this.height/2))
    };
    flock!step()
  }
}

class Flock
  boids : [Boid] -- Use static array as a size
  bdata : [BoidData]
  bdata2 : [BoidData]
	alter : bool
  len   : int    -- Actual length
  moved : int
  steps : int
  width : int
  height: int


  def init(steps: int, width: int, height: int, size: int) : void {
    this.moved = 0;
    this.steps = steps;
    this.width = width;
    this.height = height;
		this.alter = true;
    this.len    = 0;
    this.boids = new [Boid](size);
    this.bdata = new [BoidData](size);
    this.bdata2 = new [BoidData](size)
  }

  def createBoid(loc: Vector2D): void {
    let bd = new BoidData(loc);
    let b = new Boid(this.len, bd, this.width, this.height);
    this.boids[this.len] = b;
    this.bdata[this.len] = bd;
    this.len = this.len + 1
  }

  def step(): void {
    if this.steps > 0 then {
      for b in this.boids {
        b!move(this, if this.alter then this.bdata else this.bdata2)
      };
      this.steps = this.steps - 1;
    }
  }

  def ack(bd: BoidData, i: int): void {
    if this.alter then {
			this.bdata2[i] = bd;
		}else{
			this.bdata[i] = bd;
		};
		
    this.moved = this.moved + 1;
    if this.moved == |this.boids| then {
			this.alter = not this.alter;
      this.moved = 0;
      this!step()
    }
  }

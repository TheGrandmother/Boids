import Random
import Util
import Tuples

class Main {

  def main(args: [String]): void {
    setSeed(1);
    print("Hi! {}\n", |args|);
    print("RandomReal is {}\n", randomReal(0, 10));
    print("RandomReal is {}\n", randomReal(0, 10));
    print("RandomReal is {}\n", randomReal(0, 10));
    print("RandomReal is {}\n", randomReal(0, 10));
  }
}

passive class BoidData {
  location: Coord
  velocity: Vector2D
  acceleration: Vector2D
  r: real
  maxforce: real -- Maximum steering force
  maxspeed: real -- Maximum speed

  def init(loc: Coord): void {
    this.location = loc;
    this.acceleration = new Vector2D(0.0, 0.0);
    let angle = random(6.28);
    this.velocity = new Vector2D(cos(angle), sin(angle));
    this.r = 2.0;
    this.maxspeed = 2.0;
    this.maxforce = 0.03;
  }

  def clone(): BoidData {
    null -- TODO
  }
}

class Boid {
  id: int
  data: BoidData

  def init(id: int, loc: Coord): void {
    this.id = id;
    this.data = new BoidData(loc);
  }

  def applyForce(PVector force): void {
    -- We could add mass here if we want A = F / M
    acceleration.add(force);
  }

  def move(boids: [BoidData]): void {
    let sep = this.separation(boids);
    let ali = this.align(boids);
    let coh = this.cohesion(boids);

    -- Arbitrarily weight these forces
    sep.mul(1.5);
    ali.mul(1.0);
    coh.mul(1.0);
    -- Add the force vectors to acceleration
    -- applyForce(sep);
    -- applyForce(ali);
    -- applyForce(coh);
    -- -- Update velocity

    --     velocity.add(acceleration);
    --     // Limit speed
    --     velocity.limit(maxspeed);
    --     location.add(velocity);
    --     // Reset accelertion to 0 each cycle
    --     acceleration.mult(0);

    ()
  }

  -- void run(ArrayList<Boid> boids) {
  --     flock(boids);
  --     update();
  --     borders();
  --     render();
  --   }


  def separation(boids: [BoidData]): void {
    let desiredseparation = 25.0;
    let steer = new Vector3D(0.0, 0.0, 0.0);
    let count = 0;

    -- For every boid in the system, check if it's too close
    for other in boids {
      let dist = this.data.location.distance(other.location);
        if (dist > 0) and (dist < desiredseparation) then {
          let diff = this.data.location.sub(other.location);
          diff.normalize();
          diff.div(dist);
          steer.add(diff);
          count = count + 1
        }
    };
    if (count > 0) then steer.div(count);
    if steer.mag() > 0 then {
      steer.normalize();
      steer.mult(this.data.maxspeed);
      steer.sub(this.data.velocity);
      steer.limit(this.data.maxforce);
      ()
    };
    steer
  }

  -- Alignment
  -- For every nearby boid in the system, calculate the average velocity
  def align (boids: [BoidData]) : Vector2D {
    let neighbordist = 50;
    let sum = new Vector2D(0.0, 0.0);
    let count = 0;
    for other in boids {
      let d = sum.dist(other.location);
      if ((d > 0) and (d < neighbordist)) then {
        sum.add(other.velocity);
        count = count + 1;
      };

      if (count > 0) then {
        sum.div(count*1.0);
        --First two lines of code below could be condensed with new PVector setMag() method
        --Not using this method until Processing.js catches up
        --sum.setMag(maxspeed);

        --// Implement Reynolds: Steering = Desired - Velocity
        sum.normalize();
        sum.mult(this.data.maxspeed);

        let steer = sum.sub(this.data.velocity);
        steer.limit(this.data.maxforce);
        steer
      }
      else {
        new Vector2D(0.0, 0.0);
      }
    }
  }
}

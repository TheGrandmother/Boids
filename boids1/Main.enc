import Random
import Util

class Main {

  def main(args: [String]): void {
    print ("Hi! {}", |args|)
  }
}

passive class BoidData {
  location: Coord
  velocity: Vector2D
  acceleration: Vector2D
  r: real
  maxforce: real -- Maximum steering force
  maxspeed: real -- Maximum speed

  def init(loc: Coord): void {
    this.location = loc;
    this.acceleration = new Vector2D(0.0, 0.0);

    let angle = random(6.28) ; -- ?
    this.velocity = new Vector2D(cos(angle), sin(angle));
    this.r = 2.0;
    this.maxspeed = 2.0;
    this.maxforce = 0.03;
  }
}


class Boid {
  id: int
  data: BoidData

  def init(id: int, loc: Coord): void {
    this.id = id;
    this.data = new BoidData(loc);
  }

  def separation(boids: [BoidData]): void {
    let desiredseparation = 25.0;
    let steer = new Vector3D(0.0, 0.0, 0.0);
    let count = 0;

    -- For every boid in the system, check if it's too close
    -- for boid in boids {
    --   let dist = this.location.distance(boid.location);
    --     ()
    --   -- if d > 0 and d < desiredseparation then {
    --   -- }
    --     -- let
    --     --     PVector diff = PVector.sub(location, other.location);
    --     --     diff.normalize();
    --     --     diff.div(d);        // Weight by distance
    --     --     steer.add(diff);
    --     --     count++;            // Keep track of how many
    --
    --   -- }
    -- }



    -- for (Boid other : boids) {
    --   float d = PVector.dist(location, other.location);
    --   // If the distance is greater than 0 and less than an arbitrary amount (0 when you are yourself)
    --   if ((d > 0) && (d < desiredseparation)) {
    --     // Calculate vector pointing away from neighbor
    --     PVector diff = PVector.sub(location, other.location);
    --     diff.normalize();
    --     diff.div(d);        // Weight by distance
    --     steer.add(diff);
    --     count++;            // Keep track of how many
    --   }
    -- }
    -- // Average -- divide by how many
    -- if (count > 0) {
    --   steer.div((float)count);
    -- }
    --
    -- // As long as the vector is greater than 0
    -- if (steer.mag() > 0) {
    --   // First two lines of code below could be condensed with new PVector setMag() method
    --   // Not using this method until Processing.js catches up
    --   // steer.setMag(maxspeed);
    --
    --   // Implement Reynolds: Steering = Desired - Velocity
    --   steer.normalize();
    --   steer.mult(maxspeed);
    --   steer.sub(velocity);
    --   steer.limit(maxforce);
    -- }
    -- return steer
  }

}

passive class Vector2D
  x: real
  y: real

  def init(x: real, y: real): void {
    this.x = x;
    this.y = y
  }

  def distance(other: Vector2D): real {
    0.0 -- TODO
  }

  def diff(other: Vector2D): real {
    0.0
  }

  def sub(other: Vector2D): real {
    0.0
  }


passive class Vector3D
  x: real
  y: real
  z: real

  def init(x: real, y: real, z: real): void {
    this.x = x;
    this.y = y;
    this.z = z
  }

  def distance(other: Vector3D): real {
    0.0
  }

  def diff(other: Vector3D): real {
    0.0
  }

  def sub(other: Vector3D): real {
    0.0
  }

passive class Coord
  x: int
  y: int

  def init(x: int, y: int): void {
    this.x = x;
    this.y = y
  }

  def diff(other: Coord): Vector2D {
    null
  }


  def sub(other: Coord): real {
    0.0
  }

import Random
import Util
import Tuples

class Main {

  def main(args: [String]): void {
    print ("Hi! {}", |args|)
  }
}

passive class BoidData {
  location: Coord
  velocity: Vector2D
  acceleration: Vector2D
  r: real
  maxforce: real -- Maximum steering force
  maxspeed: real -- Maximum speed

  def init(loc: Coord): void {
    this.location = loc;
    this.acceleration = new Vector2D(0.0, 0.0);

    let angle = random(6.28) ; -- ?
    this.velocity = new Vector2D(cos(angle), sin(angle));
    this.r = 2.0;
    this.maxspeed = 2.0;
    this.maxforce = 0.03;
  }

  def separation(boids: [Boid]): void {
    let desiredseparation = 25.0;
    let steer = new Vector3D(0.0, 0.0, 0.0);
    let count = 0;

    -- for boid in voids {
    --   ()
    -- }


    -- For every boid in the system, check if it's too close

    -- for (Boid other : boids) {
    --   float d = PVector.dist(location, other.location);
    --   // If the distance is greater than 0 and less than an arbitrary amount (0 when you are yourself)
    --   if ((d > 0) && (d < desiredseparation)) {
    --     // Calculate vector pointing away from neighbor
    --     PVector diff = PVector.sub(location, other.location);
    --     diff.normalize();
    --     diff.div(d);        // Weight by distance
    --     steer.add(diff);
    --     count++;            // Keep track of how many
    --   }
    -- }
    -- // Average -- divide by how many
    -- if (count > 0) {
    --   steer.div((float)count);
    -- }
    --
    -- // As long as the vector is greater than 0
    -- if (steer.mag() > 0) {
    --   // First two lines of code below could be condensed with new PVector setMag() method
    --   // Not using this method until Processing.js catches up
    --   // steer.setMag(maxspeed);
    --
    --   // Implement Reynolds: Steering = Desired - Velocity
    --   steer.normalize();
    --   steer.mult(maxspeed);
    --   steer.sub(velocity);
    --   steer.limit(maxforce);
    -- }
    -- return steer
  }

  -- Alignment
  -- For every nearby boid in the system, calculate the average velocity
  def align (boids: [Boid]) : Vector2D {
    new Vector2D(0.0,0.0);
    --let 
    --  neighbordist = 50
    --  sum = new Vector2D(0.0, 0.0)
    --  count = 0
    --in {
    --  for other in boids {
    --    let
    --      d = other.dist(this.location, other.location)
    --    in
    --      if ((d > 0) && (d < neighbordist)) then {
    --        sum.add(other.velocity);
    --        count = count + 1;
    --      }
    --  };

    --  if (count > 0) then {
    --    sum.div(count*1.0);
    --    --First two lines of code below could be condensed with new PVector setMag() method
    --    --Not using this method until Processing.js catches up
    --    --sum.setMag(maxspeed);

    --    --// Implement Reynolds: Steering = Desired - Velocity
    --    sum.normalize();
    --    sum.mult(this.maxspeed);
    --    let 
    --      steer = sum.sub(sum, this.velocity);
    --      steer.limit(this.maxforce);
    --    in  
    --      steer
    --  } 
    --  else {
    --    new Vector2D(0.0, 0.0);
    --  }
    --}
  }
}


class Boid {
  id: int
  data: BoidData

  def init(id: int, loc: Coord): void {
    this.id = id;
    this.data = new BoidData(loc);
  }

  def separation(boids: [BoidData]): void {
    let desiredseparation = 25.0;
    let steer = new Vector3D(0.0, 0.0, 0.0);
    let count = 0;

    -- For every boid in the system, check if it's too close
    for other in boids {
      let dist = this.data.location.distance(other.location);
    --     ()
    }
  }
}

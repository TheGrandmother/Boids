bundle Vector2D where

import Util

embed
#include <math.h>
end

passive class Vector2D
  x: real
  y: real

  def init(x: real, y: real): void {
    this.x = x;
    this.y = y
  }

  def distance(other: Vector2D): real {
    let x_diff = this.x - other.x;
    let y_diff = this.y - other.y;
    sqrt(x_diff * x_diff + y_diff * y_diff);
  }

  def sub(other: Vector2D): Vector2D {
    new Vector2D(other.x - this.x, other.y - this.y)
  }

  def add(other: Vector2D): Vector2D {
    new Vector2D(other.x + this.x, other.y + this.y)
  }

  def magnitude() : real {
    let x = this.x;
    let y = this.y;
    sqrt(x * x + y * y);
  }

  def normalize(): void {
    let magn = this.magnitude();
    this.x = this.x / magn;
    this.y = this.y / magn;
  }

  def div(r: real): void {
    this.x = this.x / r;
    this.y = this.y / r;
  }

  def mul(r: real): void {
    this.x = this.x * r;
    this.y = this.y * r;
  }

  def limit(r : real) : void {
    let magn = this.magnitude();
    if (magn > r) then {
      this.normalize();
      this.mul(r)
    }
  }

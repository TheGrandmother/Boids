bundle Vector where

import Util

embed
#include <math.h>
end

passive class Vector
  x: real
  y: real

  def init(x: real, y: real): void {
    this.x = x;
    this.y = y
  }

  def clone(): Vector {
    new Vector(this.x, this.y)
  }

  def distance(other: Vector): real {
    let x_diff = this.x - other.x;
    let y_diff = this.y - other.y;
    sqrt(x_diff * x_diff + y_diff * y_diff);
  }

  def sub(other: Vector): Vector {
    new Vector(this.x - other.x, this.y - other.y)
  }

  def add(other: Vector): Vector {
    new Vector(other.x + this.x, other.y + this.y)
  }

  def magnitude() : real {
    let x = this.x;
    let y = this.y;
    sqrt(x * x + y * y);
  }

  def normalize(): Vector {
    let magn = this.magnitude();
    new Vector(this.x / magn, this.y / magn)
  }

  def div(r: real): Vector {
    new Vector(this.x / r , this.y / r)
  }

  def mul(r: real): Vector {
    new Vector(this.x * r, this.y * r)
  }

  def limit(r : real) : Vector {
    let magn = this.magnitude();
    if (magn > r) then {
      this.normalize().mul(r);
    } else{
      new Vector(this.x,this.y)
    }
  }

  def show(): void {
    print("({}, {})\n", this.x, this.y);
  }
